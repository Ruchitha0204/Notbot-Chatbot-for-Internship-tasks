{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <center>WhatsApp Bot using Twilio and Python (Part-2)</center><br><center><i><u>Setting up Webhook for Incoming Messages</u></i></center>\n",
    "\n",
    "![](images/1.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Setup a Python Virtual Environment\n",
    "> A virtual environment is a tool that helps to keep dependencies required by different projects separate by creating isolated python virtual environments for them.\n",
    "\n",
    "- Create a Project Folder.\n",
    "\n",
    "\n",
    "- Run following command to create a new virtual environment inside your project folder:\n",
    "```\n",
    "python -m venv myvenv\n",
    "```\n",
    "\n",
    "    After running above command, a folder named `myvenv` will get created in your project folder.\n",
    "\n",
    "\n",
    "- Activate the virtual environment by running following command:\n",
    "    - For ubuntu and mac users:\n",
    "        ```\n",
    "        source myvenv/bin/activate\n",
    "        ```\n",
    "    - For windows users:\n",
    "        ```\n",
    "        myvenv\\Scripts\\activate\n",
    "        ```\n",
    "---------\n",
    "\n",
    "### 2. Install required Python Packages:\n",
    "- [flask](https://github.com/pallets/flask)\n",
    "    ```\n",
    "    pip install flask\n",
    "    ```\n",
    "\n",
    "- [twilio](https://github.com/twilio/twilio-python)\n",
    "    ```\n",
    "    pip install twilio\n",
    "    ```\n",
    "\n",
    "------\n",
    "\n",
    "### 3. Create a Flask App (app.py)\n",
    "```python\n",
    "from flask import Flask, request\n",
    "from twilio.twiml.messaging_response import MessagingResponse\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route(\"/\")\n",
    "def hello():\n",
    "    return \"Hello, World!\"\n",
    "\n",
    "@app.route(\"/sms\", methods=['POST'])\n",
    "def sms_reply():\n",
    "    \"\"\"Respond to incoming calls with a simple text message.\"\"\"\n",
    "    # Fetch the message\n",
    "    msg = request.form.get('Body')\n",
    "    \n",
    "    # Create reply\n",
    "    resp = MessagingResponse()\n",
    "    resp.message(\"You said: {}\".format(msg))\n",
    "\n",
    "    return str(resp)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app.run(debug=True)\n",
    "```\n",
    "-------\n",
    "\n",
    "### 4. Run the flask app\n",
    "\n",
    "```\n",
    "python app.py\n",
    "```\n",
    "\n",
    "-------\n",
    "\n",
    "### 5. For local testing: Generate Public URL for Webhook using ngrok.io\n",
    "\n",
    "![](images/ngrok.png)\n",
    "\n",
    ">*ngrok is a free tool that allows us to tunnel from a public URL to our application running locally.*\n",
    "\n",
    "- Download [ngrok](https://ngrok.com/download).\n",
    "\n",
    "- Unzip it.\n",
    "\n",
    "- Run ngrok from command line (from the location where executable is stored)\n",
    "    ```\n",
    "    ./ngrok http 5000\n",
    "    ```\n",
    "\n",
    "- Copy the **HTTPS Forwarding URL**\n",
    "    ![](images/2.png)\n",
    "\n",
    "\n",
    "- Paste it as the **webhook URL for incoming messages** in your sandbox configuration.\n",
    "    ![](images/3.png)\n",
    "--------\n",
    "\n",
    "### Now, we are ready to test the bot!\n",
    "\n",
    "### References\n",
    "\n",
    "- [What is TwiML?](https://www.twilio.com/docs/sms/twiml)\n",
    "- [Receive and Reply to SMS and MMS Messages in Python](https://www.twilio.com/docs/sms/tutorials/how-to-receive-and-reply-python)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
